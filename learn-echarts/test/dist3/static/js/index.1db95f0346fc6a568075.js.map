{"version":3,"sources":["webpack:///static/js/index.1db95f0346fc6a568075.js","webpack:///./src/index.js","webpack:///./src/api/getData.js","webpack:///./src/fetch/get.js","webpack:///./src/echartsOptions/index.js"],"names":["webpackJsonp","158","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__api_getData__","__WEBPACK_IMPORTED_MODULE_1__echartsOptions__","__WEBPACK_IMPORTED_MODULE_2_echarts_extension_dataTool__","__WEBPACK_IMPORTED_MODULE_2_echarts_extension_dataTool___default","n","__WEBPACK_IMPORTED_MODULE_3_echarts__","chart","then","res","text","xml","graph","a","gexf","parse","159","getUntitled","__WEBPACK_IMPORTED_MODULE_0__fetch_get__","160","get","url","fetch","credentials","headers","Accept","161","ecInit","el","__WEBPACK_IMPORTED_MODULE_0_echarts___default","init","document","querySelector","showLoading","addGraphOption","categories","i","name","nodes","forEach","node","Math","random","category","option","title","subtext","top","left","tooltip","legend","data","map","animationDuration","animationEasingUpdate","series","type","layout","links","roam","label","normal","position","formatter","lineStyle","color","curveness","setOption","hideLoading","__WEBPACK_IMPORTED_MODULE_0_echarts__"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAAqBC,GAE7C,YACAC,QAAOC,eAAeH,EAAqB,cAAgBI,OAAO,GAC7C,IAAIC,GAA6CJ,EAAoB,KACjEK,EAAgDL,EAAoB,KACpEM,EAA2DN,EAAoB,KAC/EO,EAAmEP,EAAoBQ,EAAEF,GACzFG,EAAwCT,EAAoB,ICJ/EU,GDKmEV,EAAoBQ,EAAEC,GCLjFR,OAAAI,EAAA,GAAO,SAErBJ,QAAAG,EAAA,KACGO,KAAK,SAAAC,GAAA,MAAOA,GAAIC,SAChBF,KAAK,SAAAG,GACJ,GAAMC,GAAQR,EAAAS,EAASC,KAAKC,MAAMJ,EAClCb,QAAAI,EAAA,GAAeK,EAAOK,MDgBpBI,IACA,SAAUrB,EAAQC,EAAqBC,GAE7C,YERO,SAASoB,KACd,MAAOnB,QAAAoB,EAAA,GAAI,2BFUoBtB,EAAuB,EAAIqB,CACvC,IAAIC,GAA2CrB,EAAoB,MA6BlFsB,IACA,SAAUxB,EAAQC,EAAqBC,GAE7C,YGjEO,SAASuB,GAAIC,GAClB,MAAOC,OAAMD,GACXE,YAAa,UACbC,SACEC,OAAU,uCH8DiB7B,EAAuB,EAAIwB,GAatDM,IACA,SAAU/B,EAAQC,EAAqBC,GAE7C,YIhFO,SAAS8B,GAAOC,GACrB,IAAKA,EAAI,MAAO,KAChB,IAAMrB,GAAQsB,EAAAhB,EAAQiB,KAAKC,SAASC,cAAcJ,GAElD,OADArB,GAAM0B,cACC1B,EA4nBF,QAAS2B,GAAe3B,EAAOK,GAGpC,IAAK,GADCuB,MACGC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAWC,IACTC,KAAM,KAAOD,EAGjBxB,GAAM0B,MAAMC,QAAQ,SAAAC,GAClBA,EAAKxC,SAA2B,IAAhByC,KAAKC,UACrBF,EAAKG,YAA8B,EAAhBF,KAAKC,WAE1B,IAAME,IACJC,OACEnC,KAAM,UACNoC,QAAS,iBACTC,IAAK,SACLC,KAAM,SAERC,WACAC,SAEEC,KAAMhB,EAAWiB,IAAI,SAAUvC,GAC7B,MAAOA,GAAEwB,SAGbgB,kBAAmB,KACnBC,sBAAuB,eACvBC,SAEIlB,KAAM,UACNmB,KAAM,QACNC,OAAQ,OACRN,KAAMvC,EAAM0B,MACZoB,MAAO9C,EAAM8C,MACbvB,WAAYA,EACZwB,MAAM,EACNC,OACEC,QACEC,SAAU,QACVC,UAAW,QAGfC,WACEH,QACEI,MAAO,SACPC,UAAW,OAOrB3D,GAAM4D,UAAUvB,GAChBrC,EAAM6D,cJrmByBxE,EAAuB,EAAI+B,EAI3B/B,EAAuB,EAAIsC,CACvC,IAAImC,GAAwCxE,EAAoB,IAC5DgC,EAAgDhC,EAAoBQ,EAAEgE,MAkmB5F","file":"static/js/index.1db95f0346fc6a568075.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 158:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api_getData__ = __webpack_require__(159);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__echartsOptions__ = __webpack_require__(161);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_extension_dataTool__ = __webpack_require__(440);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_extension_dataTool___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_extension_dataTool__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_echarts__);\n\n\n\n\n\nvar chart = Object(__WEBPACK_IMPORTED_MODULE_1__echartsOptions__[\"b\" /* ecInit */])('#main');\n\nObject(__WEBPACK_IMPORTED_MODULE_0__api_getData__[\"a\" /* getUntitled */])().then(function (res) {\n  return res.text();\n}).then(function (xml) {\n  var graph = __WEBPACK_IMPORTED_MODULE_2_echarts_extension_dataTool___default.a.gexf.parse(xml);\n  Object(__WEBPACK_IMPORTED_MODULE_1__echartsOptions__[\"a\" /* addGraphOption */])(chart, graph);\n});\n\n/***/ }),\n\n/***/ 159:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export getData */\n/* unused harmony export getNames */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = getUntitled;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__fetch_get__ = __webpack_require__(160);\n\n\nfunction getData(id) {\n  return Object(__WEBPACK_IMPORTED_MODULE_0__fetch_get__[\"a\" /* get */])('/api/sp500hst/item/' + id).then(function (res) {\n    return res.json();\n  }).then(function (json) {\n    if (json.code === 0) {\n      return json.data;\n    }\n  });\n}\n\nfunction getNames() {\n  return Object(__WEBPACK_IMPORTED_MODULE_0__fetch_get__[\"a\" /* get */])('/api/sp500hst/names').then(function (res) {\n    return res.json();\n  }).then(function (json) {\n    if (json.code === 0) {\n      return json.data;\n    }\n  });\n}\n\nfunction getUntitled() {\n  return Object(__WEBPACK_IMPORTED_MODULE_0__fetch_get__[\"a\" /* get */])('/api/gexf/Untitled.gexf');\n}\n\n/***/ }),\n\n/***/ 160:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = get;\n\nfunction get(url) {\n  return fetch(url, {\n    credentials: 'include',\n    headers: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  });\n}\n\n/***/ }),\n\n/***/ 161:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = ecInit;\n/* unused harmony export setCandlestickOption */\n/* unused harmony export setCandlestickBaseOption */\n/* unused harmony export addSyncData */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = addGraphOption;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_echarts__);\n\n\n\nfunction ecInit(el) {\n  if (!el) return null;\n  var chart = __WEBPACK_IMPORTED_MODULE_0_echarts___default.a.init(document.querySelector(el));\n  chart.showLoading();\n  return chart;\n}\n\nvar upColor = '#ec0000';\nvar upBorderColor = '#8A0000';\nvar downColor = '#00da3c';\nvar downBorderColor = '#008F28';\n\nfunction setCandlestickOption(chart, initialData, id) {\n\n  var data0 = splitData(initialData);\n  var option = {\n    title: {\n      text: id + '指数',\n      left: 0\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross'\n      }\n    },\n    legend: {\n      data: ['日K', 'MA5', 'MA10', 'MA20', 'MA30']\n    },\n    grid: {\n      left: '10%',\n      right: '10%',\n      bottom: '15%'\n    },\n    xAxis: {\n      type: 'category',\n      data: data0.categoryData,\n      scale: true,\n      boundaryGap: false,\n      axisLine: { onZero: false },\n      splitLine: { show: false },\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    yAxis: {\n      scale: true,\n      splitArea: {\n        show: true\n      }\n    },\n\n    series: [{\n      name: '日K',\n      type: 'candlestick',\n      data: data0.values,\n      itemStyle: {\n        normal: {\n          color: upColor,\n          color0: downColor,\n          borderColor: upBorderColor,\n          borderColor0: downBorderColor\n        }\n      },\n      markPoint: {\n        label: {\n          normal: {\n            formatter: function formatter(param) {\n              return param != null ? Math.round(param.value) : '';\n            }\n          }\n        },\n        data: [{\n          name: 'XX标点',\n          coord: ['2013/5/31', 2300],\n          value: 2300,\n          itemStyle: {\n            normal: { color: 'rgb(41,60,85)' }\n          }\n        }, {\n          name: 'highest value',\n          type: 'max',\n          valueDim: 'highest'\n        }, {\n          name: 'lowest value',\n          type: 'min',\n          valueDim: 'lowest'\n        }, {\n          name: 'average value on close',\n          type: 'average',\n          valueDim: 'close'\n        }],\n        tooltip: {\n          formatter: function formatter(param) {\n            return param.name + '<br>' + (param.data.coord || '');\n          }\n        }\n      },\n      markLine: {\n        symbol: ['none', 'none'],\n        data: [[{\n          name: 'from lowest to highest',\n          type: 'min',\n          valueDim: 'lowest',\n          symbol: 'circle',\n          symbolSize: 10,\n          label: {\n            normal: { show: false },\n            emphasis: { show: false }\n          }\n        }, {\n          type: 'max',\n          valueDim: 'highest',\n          symbol: 'circle',\n          symbolSize: 10,\n          label: {\n            normal: { show: false },\n            emphasis: { show: false }\n          }\n        }], {\n          name: 'min line on close',\n          type: 'min',\n          valueDim: 'close'\n        }, {\n          name: 'max line on close',\n          type: 'max',\n          valueDim: 'close'\n        }]\n      }\n    }, {\n      name: 'MA5',\n      type: 'line',\n      data: calculateMA(5),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA10',\n      type: 'line',\n      data: calculateMA(10),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA20',\n      type: 'line',\n      data: calculateMA(20),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA30',\n      type: 'line',\n      data: calculateMA(30),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }]\n  };\n\n  chart.setOption(option);\n  chart.hideLoading();\n\n  function splitData(rawData) {\n    var categoryData = [];\n    var values = [];\n\n    for (var i = 0; i < rawData.length; i++) {\n      categoryData.push(rawData[i][0].replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1/$2/$3'));\n      values.push([+rawData[i][1], +rawData[i][4], +rawData[i][3], +rawData[i][2]]);\n    }\n\n    return {\n      categoryData: categoryData,\n      values: values\n    };\n  }\n\n  function calculateMA(dayCount) {\n    var result = [];\n    for (var i = 0, len = data0.values.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-');\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayCount; j++) {\n        sum += data0.values[i - j][1];\n      }\n      result.push(sum / dayCount);\n    }\n    return result;\n  }\n}\n\nvar DATA0 = {\n  categoryData: [],\n  values: []\n};\nfunction setCandlestickBaseOption(chart, data, id, initialNum) {\n  initialNum = initialNum || 30;\n  var baseOption = {\n    title: {\n      text: id + '指数',\n      left: 0\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross'\n      }\n    },\n    legend: {\n      data: ['日K', 'MA5', 'MA10', 'MA20', 'MA30']\n    },\n    grid: {\n      left: '10%',\n      right: '10%',\n      bottom: '15%'\n    },\n    xAxis: {\n      type: 'category',\n      data: DATA0.categoryData,\n      scale: true,\n      boundaryGap: false,\n      axisLine: { onZero: false },\n      splitLine: { show: false },\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    yAxis: {\n      scale: true,\n      splitArea: {\n        show: true\n      }\n    },\n\n    series: [{\n      name: '日K',\n      type: 'candlestick',\n      data: DATA0.values,\n      itemStyle: {\n        normal: {\n          color: upColor,\n          color0: downColor,\n          borderColor: upBorderColor,\n          borderColor0: downBorderColor\n        }\n      },\n      markPoint: {\n        label: {\n          normal: {\n            formatter: function formatter(param) {\n              return param != null ? Math.round(param.value) : '';\n            }\n          }\n        },\n        data: [{\n          name: 'XX标点',\n          coord: ['2013/5/31', 2300],\n          value: 2300,\n          itemStyle: {\n            normal: { color: 'rgb(41,60,85)' }\n          }\n        }, {\n          name: 'highest value',\n          type: 'max',\n          valueDim: 'highest'\n        }, {\n          name: 'lowest value',\n          type: 'min',\n          valueDim: 'lowest'\n        }, {\n          name: 'average value on close',\n          type: 'average',\n          valueDim: 'close'\n        }],\n        tooltip: {\n          formatter: function formatter(param) {\n            return param.name + '<br>' + (param.data.coord || '');\n          }\n        }\n      },\n      markLine: {\n        symbol: ['none', 'none'],\n        data: [[{\n          name: 'from lowest to highest',\n          type: 'min',\n          valueDim: 'lowest',\n          symbol: 'circle',\n          symbolSize: 10,\n          label: {\n            normal: { show: false },\n            emphasis: { show: false }\n          }\n        }, {\n          type: 'max',\n          valueDim: 'highest',\n          symbol: 'circle',\n          symbolSize: 10,\n          label: {\n            normal: { show: false },\n            emphasis: { show: false }\n          }\n        }], {\n          name: 'min line on close',\n          type: 'min',\n          valueDim: 'close'\n        }, {\n          name: 'max line on close',\n          type: 'max',\n          valueDim: 'close'\n        }]\n      }\n    }, {\n      name: 'MA5',\n      type: 'line',\n      data: calculateMA(5),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA10',\n      type: 'line',\n      data: calculateMA(10),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA20',\n      type: 'line',\n      data: calculateMA(20),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA30',\n      type: 'line',\n      data: calculateMA(30),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }]\n  };\n\n  chart.setOption(baseOption);\n\n  var items = data.slice(0, initialNum);\n  if (items.length) {\n    items.forEach(function (item) {\n      return DATA0AddFormat(item);\n    });\n    addData(chart);\n  }\n  chart.hideLoading();\n\n  function calculateMA(dayCount) {\n    var result = [];\n    for (var i = 0, len = DATA0.values.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-');\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayCount; j++) {\n        sum += DATA0.values[i - j][1];\n      }\n      result.push(sum / dayCount);\n    }\n    return result;\n  }\n}\n\nfunction addSyncData(chart, initialData, delay, num, initialIndex) {\n  var data = initialData.slice();\n  var currentIndex = initialIndex || 0;\n  var timer = setInterval(function () {\n    var items = data.slice(currentIndex, currentIndex + num);\n\n    if (items.length) {\n      items.forEach(function (item) {\n        DATA0.categoryData = DATA0.categoryData.slice(num);\n        DATA0.values = DATA0.values.slice(num);\n        DATA0AddFormat(item);\n      });\n      addData(chart);\n\n      currentIndex += num;\n    } else {\n      clearInterval(timer);\n    }\n  }, delay);\n}\n\nfunction DATA0AddFormat(item) {\n  DATA0.categoryData.push(item[0].replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1/$2/$3'));\n  DATA0.values.push([+item[1], +item[4], +item[3], +item[2]]);\n}\n\nfunction addData(chart) {\n  var option = {\n    xAxis: {\n      type: 'category',\n      data: DATA0.categoryData,\n      scale: true,\n      boundaryGap: false,\n      axisLine: { onZero: false },\n      splitLine: { show: false },\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    series: [{\n      name: '日K',\n      type: 'candlestick',\n      data: DATA0.values,\n      itemStyle: {\n        normal: {\n          color: upColor,\n          color0: downColor,\n          borderColor: upBorderColor,\n          borderColor0: downBorderColor\n        }\n      },\n      markPoint: {\n        label: {\n          normal: {\n            formatter: function formatter(param) {\n              return param != null ? Math.round(param.value) : '';\n            }\n          }\n        },\n        data: [{\n          name: 'XX标点',\n          coord: ['2013/5/31', 2300],\n          value: 2300,\n          itemStyle: {\n            normal: { color: 'rgb(41,60,85)' }\n          }\n        }, {\n          name: 'highest value',\n          type: 'max',\n          valueDim: 'highest'\n        }, {\n          name: 'lowest value',\n          type: 'min',\n          valueDim: 'lowest'\n        }, {\n          name: 'average value on close',\n          type: 'average',\n          valueDim: 'close'\n        }],\n        tooltip: {\n          formatter: function formatter(param) {\n            return param.name + '<br>' + (param.data.coord || '');\n          }\n        }\n      },\n      markLine: {\n        symbol: ['none', 'none'],\n        data: [[{\n          name: 'from lowest to highest',\n          type: 'min',\n          valueDim: 'lowest',\n          symbol: 'circle',\n          symbolSize: 10,\n          label: {\n            normal: { show: false },\n            emphasis: { show: false }\n          }\n        }, {\n          type: 'max',\n          valueDim: 'highest',\n          symbol: 'circle',\n          symbolSize: 10,\n          label: {\n            normal: { show: false },\n            emphasis: { show: false }\n          }\n        }], {\n          name: 'min line on close',\n          type: 'min',\n          valueDim: 'close'\n        }, {\n          name: 'max line on close',\n          type: 'max',\n          valueDim: 'close'\n        }]\n      }\n    }, {\n      name: 'MA5',\n      type: 'line',\n      data: calculateMA(5),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA10',\n      type: 'line',\n      data: calculateMA(10),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA20',\n      type: 'line',\n      data: calculateMA(20),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }, {\n      name: 'MA30',\n      type: 'line',\n      data: calculateMA(30),\n      smooth: true,\n      lineStyle: {\n        normal: { opacity: 0.5 }\n      }\n    }]\n  };\n  chart.setOption(option);\n  function calculateMA(dayCount) {\n    var result = [];\n    for (var i = 0, len = DATA0.values.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-');\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayCount; j++) {\n        sum += DATA0.values[i - j][1];\n      }\n      result.push(sum / dayCount);\n    }\n    return result;\n  }\n}\n\nfunction addGraphOption(chart, graph) {\n\n  var categories = [];\n  for (var i = 0; i < 5; i++) {\n    categories[i] = {\n      name: '类目' + i\n    };\n  }\n  graph.nodes.forEach(function (node) {\n    node.value = ~~(Math.random() * 100);\n    node.category = ~~(Math.random() * 5);\n  });\n  var option = {\n    title: {\n      text: 'adjnoun',\n      subtext: 'Default layout',\n      top: 'bottom',\n      left: 'right'\n    },\n    tooltip: {},\n    legend: [{\n      data: categories.map(function (a) {\n        return a.name;\n      })\n    }],\n    animationDuration: 1500,\n    animationEasingUpdate: 'quinticInOut',\n    series: [{\n      name: 'adjnoun',\n      type: 'graph',\n      layout: 'none',\n      data: graph.nodes,\n      links: graph.links,\n      categories: categories,\n      roam: true,\n      label: {\n        normal: {\n          position: 'right',\n          formatter: '{b}'\n        }\n      },\n      lineStyle: {\n        normal: {\n          color: 'source',\n          curveness: 0.3\n        }\n      }\n    }]\n  };\n\n  chart.setOption(option);\n  chart.hideLoading();\n}\n\n/***/ })\n\n},[158]);\n\n\n// WEBPACK FOOTER //\n// static/js/index.1db95f0346fc6a568075.js","/**\n * Created by Administrator on 2017/10/2 0002.\n */\nimport {getUntitled} from './api/getData'\nimport {ecInit, addGraphOption} from './echartsOptions'\nimport dataTool from 'echarts/extension/dataTool'\nimport echarts from 'echarts'\nconst chart = ecInit('#main')\n\ngetUntitled()\n  .then(res => res.text())\n  .then(xml => {\n    const graph = dataTool.gexf.parse(xml)\n    addGraphOption(chart, graph)\n  })\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Created by Administrator on 2017/9/30 0030.\n */\nimport {get} from '../fetch/get'\nexport function getData(id) {\n  return get('/api/sp500hst/item/' + id)\n    .then(res => res.json())\n    .then(json => {\n      if (json.code === 0) {\n        return json.data\n      }\n    })\n}\n\nexport function getNames(){\n  return get('/api/sp500hst/names')\n    .then(res => res.json())\n    .then(json => {\n      if (json.code === 0) {\n        return json.data\n      }\n    })\n}\n\nexport function getUntitled() {\n  return get('/api/gexf/Untitled.gexf')\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/getData.js","/**\n * Created by Administrator on 2017/9/30 0030.\n */\nexport function get(url) {\n  return fetch(url, {\n    credentials: 'include',\n    headers: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/fetch/get.js","/**\n * Created by Administrator on 2017/9/30 0030.\n */\nimport echarts from 'echarts'\n\nexport function ecInit(el) {\n  if (!el) return null\n  const chart = echarts.init(document.querySelector(el))\n  chart.showLoading()\n  return chart\n}\n\nconst upColor = '#ec0000'\nconst upBorderColor = '#8A0000'\nconst downColor = '#00da3c'\nconst downBorderColor = '#008F28'\n\nexport function setCandlestickOption(chart, initialData, id) {\n\n  const data0 = splitData(initialData)\n  const option = {\n    title: {\n      text: id + '指数',\n      left: 0\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross'\n      }\n    },\n    legend: {\n      data: ['日K', 'MA5', 'MA10', 'MA20', 'MA30']\n    },\n    grid: {\n      left: '10%',\n      right: '10%',\n      bottom: '15%'\n    },\n    xAxis: {\n      type: 'category',\n      data: data0.categoryData,\n      scale: true,\n      boundaryGap: false,\n      axisLine: {onZero: false},\n      splitLine: {show: false},\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    yAxis: {\n      scale: true,\n      splitArea: {\n        show: true\n      }\n    },\n    /*dataZoom: [\n     {\n     type: 'inside',\n     start: 50,\n     end: 100\n     },\n     {\n     show: true,\n     type: 'slider',\n     y: '90%',\n     start: 50,\n     end: 100\n     }\n     ],*/\n    series: [\n      {\n        name: '日K',\n        type: 'candlestick',\n        data: data0.values,\n        itemStyle: {\n          normal: {\n            color: upColor,\n            color0: downColor,\n            borderColor: upBorderColor,\n            borderColor0: downBorderColor\n          }\n        },\n        markPoint: {\n          label: {\n            normal: {\n              formatter: function (param) {\n                return param != null ? Math.round(param.value) : '';\n              }\n            }\n          },\n          data: [\n            {\n              name: 'XX标点',\n              coord: ['2013/5/31', 2300],\n              value: 2300,\n              itemStyle: {\n                normal: {color: 'rgb(41,60,85)'}\n              }\n            },\n            {\n              name: 'highest value',\n              type: 'max',\n              valueDim: 'highest'\n            },\n            {\n              name: 'lowest value',\n              type: 'min',\n              valueDim: 'lowest'\n            },\n            {\n              name: 'average value on close',\n              type: 'average',\n              valueDim: 'close'\n            }\n          ],\n          tooltip: {\n            formatter: function (param) {\n              return param.name + '<br>' + (param.data.coord || '');\n            }\n          }\n        },\n        markLine: {\n          symbol: ['none', 'none'],\n          data: [\n            [\n              {\n                name: 'from lowest to highest',\n                type: 'min',\n                valueDim: 'lowest',\n                symbol: 'circle',\n                symbolSize: 10,\n                label: {\n                  normal: {show: false},\n                  emphasis: {show: false}\n                }\n              },\n              {\n                type: 'max',\n                valueDim: 'highest',\n                symbol: 'circle',\n                symbolSize: 10,\n                label: {\n                  normal: {show: false},\n                  emphasis: {show: false}\n                }\n              }\n            ],\n            {\n              name: 'min line on close',\n              type: 'min',\n              valueDim: 'close'\n            },\n            {\n              name: 'max line on close',\n              type: 'max',\n              valueDim: 'close'\n            }\n          ]\n        }\n      },\n      {\n        name: 'MA5',\n        type: 'line',\n        data: calculateMA(5),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA10',\n        type: 'line',\n        data: calculateMA(10),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA20',\n        type: 'line',\n        data: calculateMA(20),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA30',\n        type: 'line',\n        data: calculateMA(30),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n\n    ]\n  }\n\n  chart.setOption(option)\n  chart.hideLoading()\n\n  function splitData(rawData) {\n    const categoryData = []\n    const values = []\n\n    for (let i = 0; i < rawData.length; i++) {\n      categoryData.push(rawData[i][0].replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1/$2/$3'))\n      values.push([\n        +rawData[i][1],\n        +rawData[i][4],\n        +rawData[i][3],\n        +rawData[i][2]\n      ])\n    }\n\n    return {\n      categoryData,\n      values\n    }\n  }\n\n  function calculateMA(dayCount) {\n    const result = []\n    for (let i = 0, len = data0.values.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-')\n        continue\n      }\n      let sum = 0\n      for (let j = 0; j < dayCount; j++) {\n        sum += data0.values[i - j][1]\n      }\n      result.push(sum / dayCount)\n    }\n    return result\n  }\n}\n\nconst DATA0 = {\n  categoryData: [],\n  values: []\n}\nexport function setCandlestickBaseOption(chart, data, id, initialNum) {\n  initialNum = initialNum || 30\n  const baseOption = {\n    title: {\n      text: id + '指数',\n      left: 0\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross'\n      }\n    },\n    legend: {\n      data: ['日K', 'MA5', 'MA10', 'MA20', 'MA30']\n    },\n    grid: {\n      left: '10%',\n      right: '10%',\n      bottom: '15%'\n    },\n    xAxis: {\n      type: 'category',\n      data: DATA0.categoryData,\n      scale: true,\n      boundaryGap: false,\n      axisLine: {onZero: false},\n      splitLine: {show: false},\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    yAxis: {\n      scale: true,\n      splitArea: {\n        show: true\n      }\n    },\n    /*dataZoom: [\n     {\n     type: 'inside',\n     start: 50,\n     end: 100\n     },\n     {\n     show: true,\n     type: 'slider',\n     y: '90%',\n     start: 50,\n     end: 100\n     }\n     ],*/\n    series: [\n      {\n        name: '日K',\n        type: 'candlestick',\n        data: DATA0.values,\n        itemStyle: {\n          normal: {\n            color: upColor,\n            color0: downColor,\n            borderColor: upBorderColor,\n            borderColor0: downBorderColor\n          }\n        },\n        markPoint: {\n          label: {\n            normal: {\n              formatter: function (param) {\n                return param != null ? Math.round(param.value) : '';\n              }\n            }\n          },\n          data: [\n            {\n              name: 'XX标点',\n              coord: ['2013/5/31', 2300],\n              value: 2300,\n              itemStyle: {\n                normal: {color: 'rgb(41,60,85)'}\n              }\n            },\n            {\n              name: 'highest value',\n              type: 'max',\n              valueDim: 'highest'\n            },\n            {\n              name: 'lowest value',\n              type: 'min',\n              valueDim: 'lowest'\n            },\n            {\n              name: 'average value on close',\n              type: 'average',\n              valueDim: 'close'\n            }\n          ],\n          tooltip: {\n            formatter: function (param) {\n              return param.name + '<br>' + (param.data.coord || '');\n            }\n          }\n        },\n        markLine: {\n          symbol: ['none', 'none'],\n          data: [\n            [\n              {\n                name: 'from lowest to highest',\n                type: 'min',\n                valueDim: 'lowest',\n                symbol: 'circle',\n                symbolSize: 10,\n                label: {\n                  normal: {show: false},\n                  emphasis: {show: false}\n                }\n              },\n              {\n                type: 'max',\n                valueDim: 'highest',\n                symbol: 'circle',\n                symbolSize: 10,\n                label: {\n                  normal: {show: false},\n                  emphasis: {show: false}\n                }\n              }\n            ],\n            {\n              name: 'min line on close',\n              type: 'min',\n              valueDim: 'close'\n            },\n            {\n              name: 'max line on close',\n              type: 'max',\n              valueDim: 'close'\n            }\n          ]\n        }\n      },\n      {\n        name: 'MA5',\n        type: 'line',\n        data: calculateMA(5),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA10',\n        type: 'line',\n        data: calculateMA(10),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA20',\n        type: 'line',\n        data: calculateMA(20),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA30',\n        type: 'line',\n        data: calculateMA(30),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n\n    ]\n  }\n\n  chart.setOption(baseOption)\n\n  const items = data.slice(0, initialNum)\n  if (items.length) {\n    items.forEach(item => DATA0AddFormat(item))\n    addData(chart)\n  }\n  chart.hideLoading()\n\n  function calculateMA(dayCount) {\n    const result = []\n    for (let i = 0, len = DATA0.values.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-')\n        continue\n      }\n      let sum = 0\n      for (let j = 0; j < dayCount; j++) {\n        sum += DATA0.values[i - j][1]\n      }\n      result.push(sum / dayCount)\n    }\n    return result\n  }\n}\n\nexport function addSyncData(chart, initialData, delay, num, initialIndex) {\n  const data = initialData.slice()\n  let currentIndex = initialIndex || 0\n  const timer = setInterval(() => {\n    const items = data.slice(currentIndex, currentIndex + num)\n\n    if (items.length) {\n      items.forEach(item => {\n        DATA0.categoryData = DATA0.categoryData.slice(num)\n        DATA0.values = DATA0.values.slice(num)\n        DATA0AddFormat(item)\n      })\n      addData(chart)\n\n      currentIndex += num\n    } else {\n      clearInterval(timer)\n    }\n  }, delay)\n}\n\nfunction DATA0AddFormat(item) {\n  DATA0.categoryData.push(item[0].replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1/$2/$3'))\n  DATA0.values.push([\n    +item[1],\n    +item[4],\n    +item[3],\n    +item[2]\n  ])\n}\n\nfunction addData(chart) {\n  const option = {\n    xAxis: {\n      type: 'category',\n      data: DATA0.categoryData,\n      scale: true,\n      boundaryGap: false,\n      axisLine: {onZero: false},\n      splitLine: {show: false},\n      splitNumber: 20,\n      min: 'dataMin',\n      max: 'dataMax'\n    },\n    series: [\n      {\n        name: '日K',\n        type: 'candlestick',\n        data: DATA0.values,\n        itemStyle: {\n          normal: {\n            color: upColor,\n            color0: downColor,\n            borderColor: upBorderColor,\n            borderColor0: downBorderColor\n          }\n        },\n        markPoint: {\n          label: {\n            normal: {\n              formatter: function (param) {\n                return param != null ? Math.round(param.value) : '';\n              }\n            }\n          },\n          data: [\n            {\n              name: 'XX标点',\n              coord: ['2013/5/31', 2300],\n              value: 2300,\n              itemStyle: {\n                normal: {color: 'rgb(41,60,85)'}\n              }\n            },\n            {\n              name: 'highest value',\n              type: 'max',\n              valueDim: 'highest'\n            },\n            {\n              name: 'lowest value',\n              type: 'min',\n              valueDim: 'lowest'\n            },\n            {\n              name: 'average value on close',\n              type: 'average',\n              valueDim: 'close'\n            }\n          ],\n          tooltip: {\n            formatter: function (param) {\n              return param.name + '<br>' + (param.data.coord || '');\n            }\n          }\n        },\n        markLine: {\n          symbol: ['none', 'none'],\n          data: [\n            [\n              {\n                name: 'from lowest to highest',\n                type: 'min',\n                valueDim: 'lowest',\n                symbol: 'circle',\n                symbolSize: 10,\n                label: {\n                  normal: {show: false},\n                  emphasis: {show: false}\n                }\n              },\n              {\n                type: 'max',\n                valueDim: 'highest',\n                symbol: 'circle',\n                symbolSize: 10,\n                label: {\n                  normal: {show: false},\n                  emphasis: {show: false}\n                }\n              }\n            ],\n            {\n              name: 'min line on close',\n              type: 'min',\n              valueDim: 'close'\n            },\n            {\n              name: 'max line on close',\n              type: 'max',\n              valueDim: 'close'\n            }\n          ]\n        }\n      },\n      {\n        name: 'MA5',\n        type: 'line',\n        data: calculateMA(5),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA10',\n        type: 'line',\n        data: calculateMA(10),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA20',\n        type: 'line',\n        data: calculateMA(20),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      },\n      {\n        name: 'MA30',\n        type: 'line',\n        data: calculateMA(30),\n        smooth: true,\n        lineStyle: {\n          normal: {opacity: 0.5}\n        }\n      }\n    ]\n  }\n  chart.setOption(option)\n  function calculateMA(dayCount) {\n    const result = []\n    for (let i = 0, len = DATA0.values.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-')\n        continue\n      }\n      let sum = 0\n      for (let j = 0; j < dayCount; j++) {\n        sum += DATA0.values[i - j][1]\n      }\n      result.push(sum / dayCount)\n    }\n    return result\n  }\n}\n\nexport function addGraphOption(chart, graph) {\n\n  const categories = [];\n  for (let i = 0; i < 5; i++) {\n    categories[i] = {\n      name: '类目' + i\n    };\n  }\n  graph.nodes.forEach(node => {\n    node.value = ~~(Math.random() * 100)\n    node.category = ~~(Math.random() * 5)\n  })\n  const option = {\n    title: {\n      text: 'adjnoun',\n      subtext: 'Default layout',\n      top: 'bottom',\n      left: 'right'\n    },\n    tooltip: {},\n    legend: [{\n      // selectedMode: 'single',\n      data: categories.map(function (a) {\n        return a.name\n      })\n    }],\n    animationDuration: 1500,\n    animationEasingUpdate: 'quinticInOut',\n    series: [\n      {\n        name: 'adjnoun',\n        type: 'graph',\n        layout: 'none',\n        data: graph.nodes,\n        links: graph.links,\n        categories: categories,\n        roam: true,\n        label: {\n          normal: {\n            position: 'right',\n            formatter: '{b}'\n          }\n        },\n        lineStyle: {\n          normal: {\n            color: 'source',\n            curveness: 0.3\n          }\n        }\n      }\n    ]\n  };\n\n  chart.setOption(option)\n  chart.hideLoading()\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/echartsOptions/index.js"],"sourceRoot":""}